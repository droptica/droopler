{"version":3,"file":"components/base/body-text/body-text.css","mappings":"AAEA,MACE,2BACA,sCAGA,uCACA,kCAHF,CAMA,WACE,6BACA,2CAHF,CCqDI,yBDpDJ,WAKI,oCAFF,CACF,CAIE,6BACE,qCAFJ,CAWI,4MACE,oCAJN,CAQE,kBACE,mCANJ,CASE,eACE,uFACA,kBAPJ,CAUE,iBACE,UARJ,CAUI,oBAGE,sDADA,qFAOA,sCACA,eALA,gBAGA,gBAJA,kBAEA,yBACA,qBALN,CAWI,wCAZE,2CAKN,CAOI,oBAEE,gFATN,CAYI,qCACE,yDAVN,CAaI,oCACE,0DAXN,CAgBI,iBACE,eAdN,C","sources":["webpack://Droopler_theme/./src/components/base/body-text/_body-text.scss","webpack://Droopler_theme/./node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"sourcesContent":["@import \"../../../scss/init\";\n\n:root {\n  --body-text-font-size: 1rem;\n  --body-text-font-size-mobile: 0.875rem;\n\n  // Table.\n  --body-text-table-cell-padding: 0.75rem;\n  --body-text-table-border-width: 2px;\n}\n\n.body-text {\n  color: var(--body-text-color);\n  font-size: var(--body-text-font-size-mobile);\n\n  @include media-breakpoint-up(md) {\n    font-size: var(--body-text-font-size);\n  }\n\n  > *:not(:last-child) {\n    margin-bottom: var(--content-spacer-s);\n  }\n\n  h1,\n  h2,\n  h3,\n  h4,\n  h5,\n  h6 {\n    &:not(.alert-heading) {\n      color: var(--body-text-heading-color);\n    }\n  }\n\n  strong {\n    color: var(--body-text-strong-color);\n  }\n\n  pre {\n    font-family: SFMono-Regular, Menlo, Monaco, Consolas, \"liberation mono\", \"courier new\", monospace;\n    white-space: normal;\n  }\n\n  table {\n    width: 100%;\n\n    th {\n      padding: var(--body-text-table-cell-padding);\n      border-top: var(--body-text-table-border-width) solid var(--body-text-table-th-color);\n      background: var(--body-text-table-th-background-color);\n      text-align: center;\n      font-weight: 700;\n      text-transform: uppercase;\n      vertical-align: middle;\n      line-height: 1.2;\n      color: var(--body-text-table-th-color);\n      font-size: 1rem;\n    }\n\n    td {\n      padding: var(--body-text-table-cell-padding);\n      border: var(--body-text-table-border-width) solid var(--body-text-table-th-color);\n    }\n\n    tr:nth-of-type(odd) {\n      background: var(--body-text-table-tr-odd-background-color);\n    }\n\n    tr:nth-of-type(even) {\n      background: var(--body-text-table-tr-even-background-color);\n    }\n  }\n\n  ul {\n    li {\n      text-align: left;\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n"],"names":[],"sourceRoot":""}