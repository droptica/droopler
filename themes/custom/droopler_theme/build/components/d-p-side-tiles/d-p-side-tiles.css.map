{"version":3,"file":"components/d-p-side-tiles/d-p-side-tiles.css","mappings":"AAEA,MACE,kCADF,CAIA,gBAGE,mBACA,oBAIA,8DADA,2DADA,iBAFF,CCqDI,yBDzDJ,gBAYI,mBADA,YAFF,CACF,CAKE,yBACE,iDACA,qFAHJ,CC2CI,yBD1CF,yBEIA,YAFA,OAGA,gBALA,kBACA,MAEA,WFII,SAEJ,CAAI,gDACE,QAEN,CACF,CAOI,6GACE,gDAFN,CAKI,yCACE,kCAHN,CAMI,2CACE,kCAJN,C","sources":["webpack://Droopler_theme/./src/components/d-p-side-tiles/d-p-side-tiles.scss","webpack://Droopler_theme/./node_modules/bootstrap/scss/mixins/_breakpoints.scss","webpack://Droopler_theme/./src/scss/base/mixins/_helpers.scss"],"sourcesContent":["@import \"../../scss/init\";\n\n:root {\n  --tiles-content-column-padding: 7vw;\n}\n\n.d-p-side-tiles {\n  $root: &;\n\n  --media-width: 100%;\n  --media-height: 100%;\n\n  position: relative;\n  border-top: 2px solid var(--tiles-gallery-background-color);\n  border-bottom: 2px solid var(--tiles-gallery-background-color);\n\n  @include media-breakpoint-up(md) {\n    display: flex;\n    align-items: center;\n  }\n\n  &__gallery {\n    background: var(--tiles-gallery-background-color);\n    outline: var(--tiles-gallery-item-padding) solid var(--tiles-gallery-background-color);\n\n    @include media-breakpoint-up(md) {\n      @include filling-absolute;\n\n      width: 50%;\n\n      #{$root}--right & {\n        left: 50%;\n      }\n    }\n  }\n\n  &__content-column {\n    #{$root}--left & {\n      padding-left: var(--tiles-content-column-padding);\n    }\n\n    #{$root}--right & {\n      padding-left: var(--tiles-content-column-padding);\n    }\n\n    .heading {\n      margin-top: var(--content-spacer-s);\n    }\n\n    .cta-links {\n      margin-top: var(--content-spacer-m);\n    }\n  }\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@mixin centered-absolute() {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n@mixin centered-flex-column() {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n@mixin centered-flex-row() {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n@mixin filling-absolute() {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n@mixin covering-media {\n  height: 100%;\n\n  picture {\n    width: 100%;\n    height: 100%;\n\n    img {\n      min-width: 100%;\n      min-height: 100%;\n      object-fit: cover;\n      object-position: center;\n    }\n  }\n}\n\n@mixin max-lines($lines: 2) {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: $lines;\n  -webkit-box-orient: vertical;\n}\n"],"names":[],"sourceRoot":""}