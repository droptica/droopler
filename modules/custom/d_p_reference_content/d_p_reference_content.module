<?php

/**
 * @file
 * File containing d_p_reference module.
 */

declare(strict_types = 1);

use Drupal\Core\Template\Attribute;

/**
 * Implements hook_preprocess_HOOK().
 */
function d_p_reference_content_preprocess_paragraph__d_p_reference_content(array &$variables) {
  /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
  $paragraph = $variables['paragraph'];

  $variables['d_p_reference_content_wrapper_attributes'] = new Attribute();

  // Current manually values.
  $reference_content = $paragraph->get('field_d_p_reference_content');
  $values = $reference_content->getValue();

  // Get latest blog node nids.
  // Selected nodes are excluded from results.
  /** @var \Drupal\d_p_reference_content\Helpers\ContentHelper $content_helper */
  $content_helper = \Drupal::service('d_p_reference_content.content_helper');
  $available_content_types = $content_helper->getContentTypes();
  $auto_values = $content_helper->getSortedContentByType($available_content_types, 'created', 'DESC', $values);
  $merged_values = array_merge($values, $auto_values);

  // Delete unpublished content.
  $merged_values = $content_helper->getPublishedContent($merged_values);

  // Get max number of values.
  /** @var \Drupal\field\Entity\FieldConfig $def */
  $def = $reference_content->getDataDefinition();
  $cardinality = $def->getFieldStorageDefinition()->getCardinality();
  $min = min(count($merged_values), $cardinality);

  // Build an array with new values.
  $new_values = [];
  for ($i = 0; $i < $min; $i++) {
    $new_values[] = $merged_values[$i];
  }

  // Replace content.
  $content_helper->replaceContent($variables, 'node', 'reference_content', 'field_d_p_reference_content', $new_values);

  $variables['#cache']['tags'][] = 'node_list';
}
